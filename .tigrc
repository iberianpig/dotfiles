# main-viewの左端にコミットIDを表示する
set main-view = id date author commit-title:graph=yes,refs=yes

# # Visualization
set id-width              = 8
set blame-options         = -M -C -w
set horizontal-scroll     = 33%
set show-notes            = yes
set show-changes          = yes
set split-view-height     = 80%
set status-show-untracked-dirs = yes
set tab-size              = 2
set diff-context          = 3
set diff-options          = -m --first-parent
set diff-highlight        = true
set ignore-space          = all
set commit-order          = topo
set ignore-case           = yes
set focus-child           = yes
set grep-view             = file-name:yes line-number:yes,interval=1 text
set wrap-lines            = no # grepの位置がズレる
set refresh-mode          = auto #options: auto / after-command / periodic / 1

# Bind Settings
bind generic <C-f> scroll-right
bind generic <C-b> scroll-left
bind generic l scroll-right
bind generic h scroll-left
bind generic g  none
bind generic o  none
bind generic R  none
bind generic gg move-first-line
bind main    G  none
bind main    G  move-last-line
bind generic G  move-last-line
bind generic ;  :
bind generic y  none
bind generic Y  view-stash

# revertを定義
bind main v !?git revert %(commit)
bind diff v !?git revert %(commit)
bind main V !?git revert %(prompt) %(commit)
bind diff V !?git revert %(prompt) %(commit)

bind branch c !?git co %(ref)
bind branch C !?git co -b %(prompt) %(commit)
bind branch p !?git push origin %(branch)
bind branch P !?git push origin %(branch) --force-with-lease --force-if-includes
bind branch L !?git pull origin %(branch)
bind branch f !git fe
bind branch <ESC>m !?git branch --move %(branch) %(prompt)
bind branch - !?git checkout -

# M で merge
bind generic M      none
bind branch  M      none
bind branch  M      ?!git merge %(branch)
bind diff    <Esc>m ?git merge %(commit)

# R で rebase
bind main    R ?git rebase %(commit)
bind diff    R ?git rebase %(commit)
bind branch  R ?git rebase %(commit)

# I で rebase -i
bind main    <Esc>i      ?git rebase -i %(branch)
bind diff    <Esc>i      ?git rebase -i %(branch)
bind branch  <Esc>i      ?git rebase -i %(branch)
bind main    I           ?git rebase -i %(commit)
bind diff    I           ?git rebase -i %(commit)
bind branch  I           ?git rebase -i %(commit)

# f で fixup
bind main    f           !?sh -c "git commit -v --fixup %(commit)"
# F で instant fixup
bind main    F           !?sh -c "git commit -v --fixup %(commit) && GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash %(commit)~"
# A で instant amend
bind main    A           !?sh -c "git commit -v --fixup amend:%(commit) && GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash %(commit)~"

# reflog
bind generic L      !sh -c "git reflog --pretty=raw | tig --pretty=raw"
bind generic _      ?git reset --hard "%(commit)"
bind generic ~      ?git reset --soft "%(commit)"

# 差分表示してコミットメッセージ編集
bind status c !?git commit -v
# hookのキャンセルオプション付きコミット
bind status C !?git commit -v -n
# amendオプション
bind status a !?git commit -v --amend
# hookキャンセル+amendオプション
bind status A !?git commit -v -n --amend
# remove file
bind status D !@?rm %(file)
# stage中のdiffを表示
bind status d view-stage
bind stage d view-stage

# `-` でステージ・アンステージをスイッチ
bind status u none
bind status - status-update
bind stage u none
bind stage - status-update

# コンフリクト解消に--ours, --theirs を利用
bind status Ro !?git checkout --ours %(file)
bind stage  Ro !?git checkout --ours %(file)
bind status Rt !?git checkout --theirs %(file)
bind stage  Rt !?git checkout --theirs %(file)
# rebaseの継続、終了
bind status Rc !?git rebase --continue
bind status Ra !?git rebase --abort

# stash
bind status  <Esc>s !?git stash push -p --message "%(prompt Enter stash -p comment: )" -- %(file)
bind status  S      !?git stash push --message "%(prompt Enter stash All comment: )"
bind stash   p      !?git stash pop %(stash)

# diff
## . で HEAD との diff
bind main    .      !sh -c "git diff %(commit) | tig"
bind diff    .      !sh -c "git diff %(commit) %(file) | tig"
bind branch  .      !sh -c "git diff %(branch) | tig"
## Alt-. で指定 commit ID との diff
bind main    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind diff    <Esc>. ?sh -c "git diff %(commit)..%(prompt Enter commit ID: ) | tig"
bind branch  <Esc>. ?sh -c "git diff %(branch)..%(prompt Enter branch name: ) | tig"

# authorで絞り込み
bind main    a      <tig --author="%(prompt Enter author: )"

# origin/masterと比較(PRのレビューに使う)
bind main <Esc>p  <sh -c "tig $(git merge-base %(commit) $(git branch  | grep '*' | cut -d ' ' -f 2))...$(git branch  | grep \* | cut -d ' ' -f 2)"

# GitHub/GitLabのURLで開く
# gh browse -R でHostを指定しておくと、gitlabでも開ける
bind main  B @!sh -c "repo=$(git remote get-url %(remote)) && gh browse --repo ${repo%/} %(commit)"
bind diff  B @!sh -c "repo=$(git remote get-url %(remote)) && if [ -n '%(file)' ]; then gh browse --repo ${repo%/} --commit=%(commit) %(file):%(lineno); else gh browse --repo ${repo%/} %(commit); fi"
bind tree  B @!sh -c "repo=$(git remote get-url %(remote)) && gh browse --repo ${repo%/} --commit=%(commit) %(directory)"
bind blob  B @!sh -c "repo=$(git remote get-url %(remote)) && gh browse --repo ${repo%/} --commit=%(commit) %(file):%(lineno)"

# bind blame B !sh -c "repo=$(git remote get-url %(remote)) && gh browse --repo ${repo%/} --commit=%(commit) %(file):%(lineno)"
# %(ref)がHEADの場合、git branchで現在のブランチを取得して指定するのが良さそう, それ以外はcommitを使う
# branch 取得 git branch | grep \* | awk '{print $(NF) }' | cut -d ')' -f 1
bind blame B @!sh -c "repo=$(git remote get-url %(remote)) && if [ '%(ref)' = 'HEAD' ]; then branch=$(git branch | grep \\* | awk '{print $(NF) }' | cut -d ')' -f 1); gh browse --repo ${repo%/} --branch=$branch %(file):%(lineno); else gh browse --repo ${repo%/} --commit=%(ref) %(file):%(lineno); fi"

bind generic <ESC>r  <tig # reopen
bind generic <C-L> :refresh

bind generic T !git notes edit %(commit)

## yank
# copy branch-name
bind branch yb @sh -c 'echo -n %(branch) | xclip -selection clipboard'
# copy commit hash
bind generic yi @sh -c 'echo -n %(commit) | xclip -selection clipboard'
# copy commit message
bind generic ym @sh -c 'git log %(commit) -1 --pretty=format:"%s%n%n%b%n" | xclip -selection clipboard'
# copy path
bind generic yp @sh -c 'echo -n %(file) | xclip -selection clipboard'
# copy diff
bind diff yy @sh -c 'git diff %(commit)~ %(commit) | xclip -selection clipboard'
# copy diff (HEAD とのファイル差分)
bind stage yy @sh -c 'git diff HEAD -- %(file) | xclip -selection clipboard'
bind status yy @sh -c 'git diff HEAD -- %(file) | xclip -selection clipboard'

# difftool
bind status <Esc>d !sh -c "git difftool -y \"$(git rev-parse --show-toplevel)/%(file)\""
bind main   <Esc>d !?sh -c "git difftool -d --trust-exit-code $(git merge-base origin/master %(commit))...%(commit)"

bind diff   D !?sh -c "git difftool %(commit) -- %(file)"
bind log    D !?sh -c "git difftool %(commit) -- %(file)"
bind pager  D !?sh -c "git difftool %(commit) -- %(file)"

# gh
bind branch <ESC>h !?sh -c "gh pr view %(branch) || git commit --allow-empty -m 'chore(WIP): draft' && gh pr create --draft"
bind branch H !sh -c "gh pr view %(branch) || gh pr create --draft"

# blame optionを切り替え
bind generic i ?:set blame-options = -M -w
bind generic <ESC>i ?:set blame-options = -M -C -C -C -w

# $ cp /usr/share/doc/tig/examples/large-repo.tigrc ~/dotfiles/.tigrc.large
source ~/.tigrc.large
